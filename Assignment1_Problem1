#include<iostream>
using namespace std;

class Node
{
public:
	int data;
	Node* next;
	Node()
	{
		data = 0;
		next = NULL;
	}
};

class List
{
public:
	Node* head;
	Node* temp;
	List()
	{
		head = NULL;
		temp = NULL;
	}
	bool isEmpty()
	{
		if (head == NULL)
			return 1;
		else
			return 0;
	}
	bool isFull()
	{
		Node* temp;
		try
		{
			temp = new Node;
			delete temp;
			return 0;
		}
		catch (bad_alloc exception)
		{
			return 1;
		}
	}
	void append(int a)
	{
		Node* ptr;
		if (isFull())
		{
			cout << "Stack is Full" << endl;
			return;
		}
		else
		{
			if (isEmpty())
			{
				ptr = new Node;
				head=ptr;
				head->data = a;
			}
			else
			{
				temp = new Node;
				ptr = head;
				while (ptr->next != NULL)
				{
					ptr = ptr->next;
				}
				temp->data = a;
				ptr->next = temp;
			}
		}
	}
	int nodeValue()
	{
		int val;
		Node* del;
		del = head;
		if (del == NULL)
		{
			cout << "List is empty" << endl;
			return-11111;
		}
		val = del->data;
		head = del->next;
		delete(del);
		return val;
	}
	int headvalue()
	{
		return head->data;
	}
	void zeroSum()
	{
		int sum = 0;
		int n = 0;
		Node* ptr = head;
		while (ptr != NULL)
		{
			n++;
			sum = sum + ptr->data;
			if (sum == 0)
			{
				ptr = ptr->next;
				for (int i = 0; i < n; i++)
				{
					Node* del;
					del = head;
					head = del->next;
					delete(del);
				}
			}
			else
			{
				ptr = ptr->next;
			}
		}
	}
};

int main()
{
	List l;
	l.append(10);
	l.append(20);
	l.append(20);
	l.append(50);
	l.append(-50);
	l.zeroSum();
	cout<<l.nodeValue()<<" " << l.nodeValue();
}
